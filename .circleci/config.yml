version: 2.1
parameters:
  WorkflowID:
    type: string
    default: "kk1j667dhjjqmz437"

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name backend-stack-${WorkflowID}
            aws cloudformation delete-stack --stack-name frontend-${WorkflowID}

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=`curl -H "token: 71542142-408e-460b-97e0-e34d677473f6" --request GET https://api.memstash.io/values/migration`
            if(( $SUCCESS==1 ));
            then
              cd backend
              npm install
              npm run migrations:revert
              
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end test
          command: |
            cd frontend
            npm install
            npm build
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: back-end test
          command: |
            cd backend
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end analyze
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: back-end analyze
          command: |
            cd backend
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=MyProject \
               --stack-name backend-stack-${WorkflowID} \
               --parameter-overrides ID=${WorkflowID}

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=MyProject\
               --stack-name frontend-${WorkflowID} \
               --parameter-overrides ID=${WorkflowID}

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            cd .circleci/ansible
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> inventory
            backend_ip=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-*" \
              --output text)
            curl -H "Content-Type: text/plain" -H "token: 71542142-408e-460b-97e0-e34d677473f6" --request PUT --data "$backend_ip" https://api.memstash.io/values/backend_ip
      - run: yum -y install tar gzip
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: "cf:42:00:95:07:62:66:b3:f9:39:b9:8a:b7:96:5b:13"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible jq curl
            pip install awscli

      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml

      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          no_output_timeout: 10m
          command: |
            cd backend
            echo ENVIROMENT=$ENVIROMENT >> .env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ./.env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ./.env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ./.env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ./.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> ./.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> ./.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ./.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ./.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ./.env
            sudo apt install python-pip jq curl
            sudo pip install awscli 
            npm i
            npm run migrations >> output.txt
            cat output.txt

      - run:
          name: Send migration results to memstash
          command: |
            cd backend
            flag=$(grep -c "1" output.txt)
            curl -H "Content-Type: text/plain" -H "token: 71542142-408e-460b-97e0-e34d677473f6" --request PUT --data "flag" https://api.memstash.io/values/migration

      - destroy-environment
      - revert-migrations

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0

    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm i
      - run:
          name: Get backend url
          command: |
            cd frontend
            sudo apt install python-pip jq curl
            sudo pip install awscli 
            BACKEND_IP=curl -H "token: 71542142-408e-460b-97e0-e34d677473f6" --request GET https://api.memstash.io/values/backend_ip
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            npm i
            npm run build
      - run:
          name: Deploy frontend objects
          command: |
            aws s3 cp ./frontend/dist s3://udapeople-${WorkflowID}/
      - destroy-environment
      - revert-migrations

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: "cf:42:00:95:07:62:66:b3:f9:39:b9:8a:b7:96:5b:13"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            cd backend
            apk add --update ansible jq curl
            pip install awscli
      - run:
          name: Deploy backend
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
      - revert-migrations

  smoke-test:
    docker:
      - image: alpine/alpine
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt upgrade
            sudo apt install curl
      - run:
          name: Get backend url and test
          command: |
            backend_url=curl -H "token: 71542142-408e-460b-97e0-e34d677473f6" --request GET https://api.memstash.io/values/backend_ip
            curl "http://${backend_url}:3030/api/status"

      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${WorkflowID}.s3-website-us-east-1.amazonaws.com"
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 0
            fi
      - destroy-environment
      - revert-migrations

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
